// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// When running the script with `npx hardhat run <script>` you'll find the Hardhat
// Runtime Environment's members available in the global scope.
const hre = require("hardhat");

async function main() {
  // Hardhat always runs the compile task when running scripts with its command
  // line interface.
  //
  // If this script is run directly using `node` you may want to call compile
  // manually to make sure everything is compiled
  // await hre.run('compile');

  // We get the contract to deploy
  const Greeter = await hre.ethers.getContractFactory("Greeter");
  const greeter = await Greeter.deploy("Greeter Deploy");

  await greeter.deployed();
  console.log("Greeter deployed to:", greeter.address);

  const ExploitMe0 = await hre.ethers.getContractFactory("ExploitMe0");
  const exploitme0 = await ExploitMe0.deploy("ExploitMe0 Deploy");

  await exploitme0.deployed();
  console.log("Greeter deployed to:", exploitme0.address);

  const ExploitMe2 = await hre.ethers.getContractFactory("ExploitMe2");
  const exploitme2 = await ExploitMe2.deploy("ExploitMe2 Deploy");

  await exploitme2.deployed();
  console.log("Greeter deployed to:", exploitme2.address);

  const Voting = await hre.ethers.getContractFactory("Voting");
  const voting = await Voting.deploy("Voting Deploy");

  await voting.deployed();
  console.log("Greeter deployed to:", voting.address);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
